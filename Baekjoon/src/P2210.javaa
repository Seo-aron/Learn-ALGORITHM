import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int[][] field = new int[5][5];
	static int[] dy = {-1, 1, 0, 0};
	static int[] dx = {0, 0, -1, 1};
	

	private static HashSet<Integer> numberMap(int y, int x, int number) {
		HashSet<Integer> hs = new HashSet<>();
		Queue<int[]> posqueue = new LinkedList<>();
		Queue<String> numqueue = new LinkedList<>();
		posqueue.offer(new int[] {y, x});
		numqueue.offer(String.valueOf(number));
		
		while(!posqueue.isEmpty()) {
			String numstr = numqueue.poll();
			int[] current = posqueue.poll();
			int cy = current[0];
			int cx = current[1];
			
			if (numstr.length() == 6) {
				hs.add(Integer.parseInt(numstr));
				continue;
			}
			
			for (int i = 0; i < 4; i++) {
				int ny = cy + dy[i];
				int nx = cx + dx[i];
				
				if (ny >= 0 && ny < 5 && nx >= 0 && nx < 5) {
					if (numstr.length() < 6) {
						numqueue.offer(numstr + field[ny][nx]);
						posqueue.offer(new int[] {ny, nx});
					}
					
				}
			}
		}
		
		return hs;
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		HashSet<Integer> hs = new HashSet<>();
		
		for (int y = 0; y < 5; y++) {
			st = new StringTokenizer(br.readLine());
			for (int x = 0; x < 5; x++) {
				field[y][x] = Integer.parseInt(st.nextToken());
			}
		}
		
		for (int y = 0; y < 5; y++) {
			for (int x = 0; x < 5; x++) {
				hs.addAll(numberMap(y, x, field[y][x]));
			}
		}
		
		System.out.println(hs.size());
	}
}
